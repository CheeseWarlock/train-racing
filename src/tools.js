// Generated by CoffeeScript 1.6.3
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.Util = {
    opposite: function(dir) {
      switch (dir) {
        case 'e':
          return 'w';
        case 'w':
          return 'e';
        case 'n':
          return 's';
        default:
          return 'n';
      }
    },
    endAngle: function(dir) {
      switch (dir) {
        case 'e':
          return 0;
        case 's':
          return Math.PI / 2;
        case 'w':
          return Math.PI;
        default:
          return Math.PI * 3 / 2;
      }
    },
    isStraight: function(track) {
      if (track.dir.length === 2) {
        return (__indexOf.call(track.dir, 'e') >= 0 && __indexOf.call(track.dir, 'w') >= 0) || (__indexOf.call(track.dir, 'n') >= 0 && __indexOf.call(track.dir, 's') >= 0);
      } else {
        return false;
      }
    },
    trackAt: function(x, y) {
      var result;
      result = null;
      Crafty("TrackSection").each(function() {
        if (this.at().x === x && this.at().y === y) {
          return result = this;
        }
      });
      return result;
    },
    dirx: function(dir) {
      switch (dir) {
        case 'e':
          return 1;
        case 'w':
          return -1;
        default:
          return 0;
      }
    },
    diry: function(dir) {
      switch (dir) {
        case 'n':
          return -1;
        case 's':
          return 1;
        default:
          return 0;
      }
    },
    heading: function(x, y) {
      if (x === -1) {
        return 'w';
      } else if (x === 1) {
        return 'e';
      } else if (y === -1) {
        return 'n';
      } else if (y === 1) {
        return 's';
      } else {
        return null;
      }
    },
    getTargetDirection: function(track, dir) {
      var idx;
      idx = track.dir.indexOf(Util.opposite(dir));
      if (idx === track.dir.length - 1) {
        return track.dir[idx - 1];
      } else {
        return track.dir[idx + 1];
      }
    },
    assignStations: function() {
      var i;
      i = 0;
      return Crafty('Station').each(function() {
        Crafty.e('2D, Canvas, spr_stop' + ['a', 'b', 'c', 'd', 'e', 'f'][i]).attr({
          x: this.x + (this.facing === 'e' || this.facing === 'w' ? 6 : 20),
          y: this.y - 20,
          z: 99
        });
        return this.letter = ['a', 'b', 'c', 'd', 'e', 'f'][i++];
      });
    },
    gameOver: function(failure) {
      var i, _i, _j, _len, _len1, _ref, _ref1;
      if (GameState.running) {
        GameState.running = false;
        if (failure) {
          _ref = [800, 1600, 2400];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            i = _ref[_i];
            setTimeout(function() {
              return Crafty('Train').each(function() {
                return this._removeSpriteComponent();
              });
            }, i);
          }
          _ref1 = [1200, 2000, 2800];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            i = _ref1[_j];
            setTimeout(function() {
              return Crafty('Train').each(function() {
                return this._addSpriteComponent();
              });
            }, i);
          }
          setTimeout(function() {
            return Crafty.e('FailureText');
          }, 2800);
          return this;
        } else {
          return setTimeout(function() {
            return Crafty.e('VictoryText');
          }, 800);
        }
      }
    },
    createTrain: function(x, y, playerOne, dir) {
      var end, follow, letter, train;
      letter = (playerOne ? 'r' : 'b');
      train = Crafty.e('PlayerTrain').at(x, y).attr('playerOne', playerOne).attr('lastDir', dir).attr('nextDir', dir).addComponent('spr_' + letter + 'train' + dir).findTrack().bindKeyboardTurn((playerOne ? Crafty.keys.Q : (window.singlePlayerMode ? null : Crafty.keys.P)));
      follow = Crafty.e('FollowTrain').at(x - Util.dirx(dir), y - Util.diry(dir)).attr('playerOne', playerOne).attr('lastDir', dir).attr('nextDir', dir).findTrack().attr('front', train).attr('canCurve', false);
      end = Crafty.e('FollowTrain').at(x - 2 * Util.dirx(dir), y - 2 * Util.diry(dir)).attr('playerOne', playerOne).attr('lastDir', dir).attr('nextDir', dir).attr('finale', true).findTrack().attr('front', follow).attr('canCurve', false);
      train.followers = [follow, end];
      follow._moveAlongTrack(6);
      end._moveAlongTrack(12);
      return train;
    },
    setupFromTiled: function(tiledmap) {
      var firstTrain, prop, secondTrain, tile, tilecode, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
      _ref = tiledmap.getEntitiesInLayer('Tracks');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tile = _ref[_i];
        tile.addComponent('TrackSection');
        for (prop in tile.__c) {
          if (prop.substring(0, 4) === 'Tile') {
            tilecode = prop.substring(4);
            switch (tilecode) {
              case '1':
                tile.dir = ['e', 's'];
                break;
              case '2':
                tile.dir = ['w', 's'];
                break;
              case '7':
                tile.dir = ['n', 'e'];
                break;
              case '8':
                tile.dir = ['n', 'w'];
                break;
              case '13':
                tile.dir = ['e', 'w'];
                break;
              case '14':
                tile.dir = ['n', 's'];
                break;
              case '19':
                tile.dir = ['w', 'e', 'n'];
                break;
              case '20':
                tile.dir = ['w', 'e', 's'];
                break;
              case '25':
                tile.dir = ['s', 'n', 'e'];
                break;
              case '26':
                tile.dir = ['s', 'n', 'w'];
                break;
              case '27':
                tile.dir = ['s', 'n', 'e', 'w'];
                break;
              case '31':
                tile.dir = ['e', 'w', 's'];
                break;
              case '32':
                tile.dir = ['e', 'w', 'n'];
                break;
              case '37':
                tile.dir = ['n', 's', 'e'];
                break;
              case '38':
                tile.dir = ['n', 's', 'w'];
            }
          }
        }
      }
      _ref1 = tiledmap.getEntitiesInLayer('Stations');
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        tile = _ref1[_j];
        for (prop in tile.__c) {
          if (prop.substring(0, 4) === 'Tile') {
            tilecode = prop.substring(4);
            if (tilecode === '29' || tilecode === '30' || tilecode === '33' || tilecode === '34' || tilecode === '35' || tilecode === '36' || tilecode === '39' || tilecode === '40' || tilecode === '41' || tilecode === '42' || tilecode === '43' || tilecode === '44' || tilecode === '45' || tilecode === '46' || tilecode === '47' || tilecode === '48' || tilecode === '49' || tilecode === '50' || tilecode === '53' || tilecode === '54' || tilecode === '62' || tilecode === '63' || tilecode === '64') {
              Crafty.e('2D, Canvas, LightLayer, spr_light' + tilecode).attr({
                x: tile.x,
                y: tile.y,
                z: 11
              });
            }
            switch (tilecode) {
              case '35':
                tile.addComponent('Station').setupAttach('w');
                break;
              case '36':
                tile.addComponent('Station').setupAttach('e');
                break;
              case '45':
                tile.addComponent('Station').setupAttach('n');
                break;
              case '47':
                tile.addComponent('Station').setupAttach('s');
            }
          }
        }
      }
      _ref2 = tiledmap.getEntitiesInLayer('Trains');
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        tile = _ref2[_k];
        tile.addComponent('Actor');
        for (prop in tile.__c) {
          if (prop.substring(0, 4) === 'Tile') {
            tilecode = prop.substring(4);
            switch (tilecode) {
              case '9':
                firstTrain = Util.createTrain(tile.at().x, tile.at().y, true, 'e');
                break;
              case '10':
                firstTrain = Util.createTrain(tile.at().x, tile.at().y, true, 'n');
                break;
              case '11':
                firstTrain = Util.createTrain(tile.at().x, tile.at().y, true, 'w');
                break;
              case '12':
                firstTrain = Util.createTrain(tile.at().x, tile.at().y, true, 's');
                break;
              case '21':
                secondTrain = Util.createTrain(tile.at().x, tile.at().y, false, 'e');
                break;
              case '22':
                secondTrain = Util.createTrain(tile.at().x, tile.at().y, false, 'n');
                break;
              case '23':
                secondTrain = Util.createTrain(tile.at().x, tile.at().y, false, 'w');
                break;
              case '24':
                secondTrain = Util.createTrain(tile.at().x, tile.at().y, false, 's');
            }
            tile.destroy();
          }
        }
      }
      _ref3 = tiledmap.getEntitiesInLayer('Props');
      for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
        tile = _ref3[_l];
        tile.attr('z', 9);
        for (prop in tile.__c) {
          if (prop.substring(0, 4) === 'Tile') {
            tilecode = prop.substring(4);
            if (tilecode === '29' || tilecode === '30' || tilecode === '33' || tilecode === '34' || tilecode === '25' || tilecode === '36' || tilecode === '39' || tilecode === '40' || tilecode === '41' || tilecode === '42' || tilecode === '43' || tilecode === '44' || tilecode === '45' || tilecode === '46' || tilecode === '47' || tilecode === '48' || tilecode === '49' || tilecode === '50' || tilecode === '53' || tilecode === '54' || tilecode === '62' || tilecode === '63' || tilecode === '64' || tilecode === '67' || tilecode === '68' || tilecode === '69' || tilecode === '73' || tilecode === '74' || tilecode === '76' || tilecode === '79' || tilecode === '80') {
              Crafty.e('2D, Canvas, LightLayer, spr_light' + tilecode).attr({
                x: tile.x,
                y: tile.y,
                z: 11
              });
            }
          }
        }
      }
      if (firstTrain) {
        Crafty.e('PlayerScore').attr({
          "x": 0,
          "y": 512
        }).attr({
          train: firstTrain,
          playerOne: true
        }).setup();
      }
      if (secondTrain) {
        return Crafty.e('PlayerScore').attr({
          "x": 392,
          "y": 512
        }).attr("train", secondTrain).setup();
      }
    },
    sunrise: function(percent) {
      if (percent < 0.25) {
        return 'rgba(' + (3 + Math.floor(percent * 400)) + ',' + (29 + Math.floor(percent * 200)) + ',51,' + (1 - percent) / 2 + ')';
      } else {
        return 'rgba(' + (103 - Math.floor((percent - 0.25) * 300)) + ',' + (79 + Math.floor((percent - 0.25) * 60)) + ',' + (51 + Math.floor((percent - 0.25) * 150)) + ',' + (1 - percent) / 2 + ')';
      }
    }
  };

  window.Constants = {
    MINUTE_DELAY: 99,
    COLLISION_SIZE: 484,
    TRAIN_SPEED: 1.75,
    TILE_HALF: 14,
    CURVE_QUARTER: 28 * Math.PI / 4,
    ENDING_DIALOGS: [['Oh no!', 'The trains collided!', 'You caused an accident!', 'What a disaster!', 'That wasn\'t supposed to happen!'], ['If anyone asks, you weren\'t having a competition.', 'You know, this is really everyone\'s fault.', 'You know, this is really everyone\'s fault. Even the passengers.', 'Some passengers were jostled, many more were late for work.', 'Remember, you\'re supposed to AVOID each other.', 'What kind of urban planner designed this place, anyway?!']]
  };

  window.GameState = {
    running: false
  };

  window.GameClock = {
    newDay: function() {
      this.hour = 6;
      return this.minute = 0;
    },
    update: function() {
      if (this.minute >= 59) {
        this.hour += 1;
        return this.minute = 0;
      } else {
        return this.minute += 1;
      }
    }
  };

  $.getJSON('./maps.json', function(mapListSource) {
    return window.MapList = mapListSource;
  });

}).call(this);
