// Generated by CoffeeScript 1.6.3
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  $(document).ready(function() {
    window.singlePlayerMode = false;
    $(window).keydown(function(e) {
      if (!window.dontGoAway && !($(e.target).is("textarea, a"))) {
        $('#display-manual').hide();
        $('#display-design').hide();
      }
      window.dontGoAway = false;
      return true;
    });
    $("body").click(function(e) {
      if (!($(e.target).is("textarea, a"))) {
        $('#display-manual').hide();
        return $('#display-design').hide();
      }
    });
    $('.linkbar a:nth-child(1)').click(function() {
      if ($('#display-manual:visible').length) {
        $('#display-manual').hide();
      } else {
        $('#display-design').hide();
        $('#display-manual').show();
      }
      return false;
    });
    return $('.linkbar a:nth-child(2)').click(function() {
      if ($('#display-design:visible').length) {
        $('#display-design').hide();
      } else {
        $('#display-manual').hide();
        $('#display-design').show();
      }
      return false;
    });
  });

  window.Game = {
    map_grid: {
      width: 22,
      height: 20,
      tile: {
        width: 28,
        height: 28
      }
    },
    width: function() {
      return this.map_grid.width * this.map_grid.tile.width;
    },
    height: function() {
      return this.map_grid.height * this.map_grid.tile.height;
    },
    start: function() {
      Crafty.init(Game.width(), Game.height(), "game-stage");
      Crafty.background('#2B281D');
      Crafty.scene('Loading');
      return this;
    }
  };

  Crafty.scene('Title', function() {
    this.letters = "";
    Crafty.e('2D, Canvas, spr_title').attr({
      x: 220
    });
    Crafty.e('TitleText').attr({
      y: 185
    }).text('Compete to see who can deliver more passengers!');
    Crafty.e('TitleText').attr({
      y: 250
    }).text('Hold keys to slow down and turn at junctions.');
    Crafty.e('2D, Canvas, spr_keyq').attr({
      x: 110,
      y: 305
    });
    Crafty.e('2D, DOM, Text').attr({
      x: 170,
      y: 311,
      w: 200
    }).text('Red Line').textFont({
      size: '26px',
      family: 'Aller'
    }).textColor('#E23228');
    Crafty.e('2D, Canvas, spr_keyp, nobots').attr({
      x: 335,
      y: 305
    });
    Crafty.e('2D, DOM, Text, nobots').attr({
      x: 395,
      y: 311,
      w: 200
    }).text('Blue Line').textFont({
      size: '26px',
      family: 'Aller'
    }).textColor('#4956FF');
    Crafty.e('TitleText').attr({
      y: 380
    }).text('And whatever you do, don\'t cause a collision!');
    Crafty.e('2D, Canvas, spr_space').attr({
      x: 264,
      y: 440
    });
    return Crafty.e('2D, Keyboard').bind('KeyDown', function(e) {
      if (e.keyCode === Crafty.keys.SPACE) {
        Crafty.scene('SelectMap');
      }
      if (e.keyCode === Crafty.keys.P) {
        this.letters += 'P';
      }
      if (e.keyCode === Crafty.keys.Q) {
        this.letters += 'Q';
      }
      if (this.letters.slice(-5) === 'PQPPQ') {
        Crafty("nobots").destroy();
        return window.singlePlayerMode = true;
      }
    });
  });

  Crafty.scene('Loading', function() {
    return Crafty.load(['img/ul.png', 'img/ppl.png', 'img/news.png'], function() {
      var spritenames, test;
      Crafty.sprite(28, 'img/ul.png', {
        spr_rtrain: [2, 0],
        spr_rtrainside: [3, 0],
        spr_rtraine: [2, 1],
        spr_rtrainn: [3, 1],
        spr_rtrainw: [4, 1],
        spr_rtrains: [5, 1],
        spr_btrain: [2, 2],
        spr_btrainside: [3, 2],
        spr_btraine: [2, 3],
        spr_btrainn: [3, 3],
        spr_btrainw: [4, 3],
        spr_btrains: [5, 3],
        spr_arrowsign: [3, 4],
        spr_platform: [4, 6],
        spr_platformu: [2, 7, 2, 1],
        spr_platformd: [4, 7, 2, 1],
        spr_platforml: [4, 5, 1, 2],
        spr_platformr: [5, 5, 1, 2]
      });
      spritenames = {};
      test = function() {
        var a, b, _i, _results;
        _results = [];
        for (a = _i = 0; _i <= 5; a = ++_i) {
          _results.push((function() {
            var _j, _results1;
            _results1 = [];
            for (b = _j = 0; _j <= 5; b = ++_j) {
              _results1.push(spritenames['spr_person' + a + b] = [a, b]);
            }
            return _results1;
          })());
        }
        return _results;
      };
      test();
      Crafty.sprite(8, 12, 'img/ppl.png', spritenames);
      Crafty.sprite(4, 12, 'img/bars.png', {
        spr_rbarl: [0, 0],
        spr_rbar: [1, 0],
        spr_rbart: [2, 0],
        spr_rbarr: [3, 0],
        spr_bbarl: [0, 1],
        spr_bbar: [1, 1],
        spr_bbart: [2, 1],
        spr_bbarr: [3, 1]
      });
      Crafty.sprite(16, 16, 'img/stops.png', {
        spr_stopa: [0, 0],
        spr_stopb: [1, 0],
        spr_stopc: [2, 0],
        spr_stopd: [3, 0],
        spr_stope: [4, 0],
        spr_stopf: [5, 0],
        spr_pstopa: [0, 1],
        spr_pstopb: [1, 1],
        spr_pstopc: [2, 1],
        spr_pstopd: [3, 1],
        spr_pstope: [4, 1],
        spr_pstopf: [5, 1]
      });
      Crafty.sprite(88, 48, 'img/space.png', {
        spr_space: [0, 0]
      });
      Crafty.sprite(48, 40, 'img/keys.png', {
        spr_keyp: [0, 0],
        spr_keyq: [0, 1],
        spr_arrowl: [1, 0],
        spr_arrowr: [1, 1]
      });
      Crafty.sprite(200, 12, 'img/barback.png', {
        spr_barback: [0, 0]
      });
      Crafty.sprite(176, 114, 'img/title.png', {
        spr_title: [0, 0]
      });
      Crafty.sprite(616, 84, 'img/brushed.png', {
        spr_brushed: [0, 0]
      });
      Crafty.sprite(24, 24, 'img/mapselect.png', {
        spr_selectstn: [0, 0],
        spr_selectarrow: [1, 0],
        spr_selectline: [0, 1],
        spr_selectstn2: [1, 1]
      });
      Crafty.sprite(134, 68, 'img/coffee.png', {
        spr_coffee: [0, 0]
      });
      Crafty.sprite(28, 28, 'img/ullight.png', {
        spr_rtrainlight: [2, 0],
        spr_rtrainsidelight: [3, 0],
        spr_rtrainelight: [2, 1],
        spr_rtrainnlight: [3, 1],
        spr_rtrainwlight: [4, 1],
        spr_rtrainslight: [5, 1],
        spr_btrainlight: [2, 2],
        spr_btrainsidelight: [3, 2],
        spr_btrainelight: [2, 3],
        spr_btrainnlight: [3, 3],
        spr_btrainwlight: [4, 3],
        spr_btrainslight: [5, 3],
        spr_light29: [4, 4],
        spr_light30: [5, 4],
        spr_light33: [2, 5],
        spr_light34: [3, 5],
        spr_light35: [4, 5],
        spr_light36: [5, 5],
        spr_light39: [2, 6],
        spr_light40: [3, 6],
        spr_light41: [4, 6],
        spr_light42: [5, 6],
        spr_light43: [0, 7],
        spr_light44: [1, 7],
        spr_light45: [2, 7],
        spr_light46: [3, 7],
        spr_light47: [4, 7],
        spr_light48: [5, 7],
        spr_light49: [0, 8],
        spr_light50: [1, 8],
        spr_light53: [4, 8],
        spr_light54: [5, 8],
        spr_light62: [1, 10],
        spr_light63: [2, 10],
        spr_light64: [3, 10],
        spr_light67: [0, 11],
        spr_light68: [1, 11],
        spr_light69: [2, 11],
        spr_light73: [0, 12],
        spr_light74: [1, 12],
        spr_light76: [3, 12],
        spr_light79: [0, 13],
        spr_light80: [1, 13]
      });
      Crafty.c('LightLayer');
      Crafty.c('AmbientLayer');
      Crafty.scene('Title');
      return this;
    });
  });

  Crafty.scene('SelectMap', function() {
    var curry, idx;
    Crafty.background('#2B281D');
    Crafty.c('MapSelectScrollable');
    curry = 140;
    for (idx in window.MapList) {
      Crafty.e('2D, Canvas, spr_selectstn').attr({
        x: 250,
        y: curry
      });
      Crafty.e('2D, Canvas, Text, aaa').attr({
        x: 280,
        y: curry + 18,
        w: 200
      }).textFont({
        size: '17px',
        family: 'Aller'
      }).textColor('#FFFDE8').text(window.MapList[idx][1]);
      Crafty.e('2D, Canvas, spr_selectline').attr({
        x: 250,
        y: curry + 24
      });
      curry += 48;
    }
    Crafty.e('2D, Canvas, spr_selectstn').attr({
      x: 250,
      y: curry
    });
    Crafty.e('2D, Canvas, Text, aaa').attr({
      x: 280,
      y: curry + 18,
      w: 200
    }).textFont({
      size: '17px',
      family: 'Aller'
    }).textColor('#5CC64C').text("Load From External...");
    Crafty.e('2D, Canvas, spr_selectarrow').attr({
      x: 200,
      y: 140
    });
    Crafty.e('2D, Canvas, Color').color('#2B281D').attr({
      y: 0,
      x: 0,
      w: 1000,
      h: 130
    });
    Crafty.e('2D, Canvas, Color').color('#2B281D').attr({
      y: 410,
      x: 0,
      w: 1000,
      h: 150
    });
    Crafty.e('TitleText').text('Select a map:').attr({
      y: 30
    }).textColor('#FFFDE8');
    Crafty.e('TitleText, Keyboard').text(window.MapList[0][1]).attr({
      y: 86,
      selection: 0
    }).textColor('#FFFDE8').textFont({
      size: '30px'
    }).bind('KeyDown', function(e) {
      if (e.keyCode === Crafty.keys.SPACE) {
        if (!window.MapList[this.selection]) {
          try {
            window.selectedMap = JSON.parse($("#custom-level-data").val());
            Crafty.scene('PlayGame');
          } catch (_error) {
            if (!($('#display-design:visible').length)) {
              $('#display-manual').hide();
              $('#display-credits').hide();
              $('#display-design').show();
              window.dontGoAway = true;
            }
          }
        } else {
          $.getJSON(window.MapList[this.selection][0], function(data) {
            window.selectedMap = data;
            return Crafty.scene('PlayGame');
          });
        }
      }
      if (e.keyCode === Crafty.keys.Q) {
        this.selection -= 1;
        if (this.selection === -1) {
          this.selection = window.MapList.length;
          Crafty('spr_selectarrow').each(function() {
            return this.attr('y', this._y + 48 * (window.MapList.length + 1));
          });
        }
        this.text(this.selection < window.MapList.length ? window.MapList[this.selection][1] : "Load From External...");
        Crafty('spr_selectarrow').each(function() {
          return this.attr('y', this._y - 48);
        });
      }
      if (e.keyCode === Crafty.keys.P) {
        this.selection += 1;
        if (this.selection === window.MapList.length + 1) {
          this.selection = 0;
          Crafty('spr_selectarrow').each(function() {
            return this.attr('y', this._y - 48 * (window.MapList.length + 1));
          });
        }
        this.text(this.selection < window.MapList.length ? window.MapList[this.selection][1] : "Load From External...");
        return Crafty('spr_selectarrow').each(function() {
          return this.attr('y', this._y + 48);
        });
      }
    }).bind('EnterFrame', function() {
      if (Crafty('spr_selectarrow').y > 284) {
        return Crafty('spr_selectarrow, spr_selectstn, spr_selectline, aaa').each(function() {
          return this.y -= 6;
        });
      } else if (Crafty('spr_selectarrow').y < 140 + Math.min(96, this.selection * 48)) {
        return Crafty('spr_selectarrow, spr_selectstn, spr_selectline, aaa').each(function() {
          return this.y += 6;
        });
      }
    });
    Crafty.e('2D, Canvas, spr_keyq').attr({
      x: 230,
      y: 430
    });
    Crafty.e('2D, Canvas, spr_keyp').attr({
      x: 338,
      y: 430
    });
    Crafty.e('2D, Canvas, spr_arrowr').attr({
      x: 230,
      y: 480
    });
    return Crafty.e('2D, Canvas, spr_arrowl').attr({
      x: 338,
      y: 480
    });
  });

  Crafty.scene('PlayGame', function() {
    Crafty.background('rgb(80, 160, 40)');
    Crafty.e("2D, Canvas, TiledMapBuilder").setMapDataSource(window.selectedMap).createWorld(Util.setupFromTiled);
    Crafty.e('2D, Canvas, spr_brushed').attr({
      w: 616,
      h: 84,
      y: 476,
      z: 14
    });
    Crafty.e('ClockController');
    Crafty.e('TrainController');
    Util.assignStations();
    return Crafty.e('2D, Canvas, Color, AmbientLayer').attr({
      x: 0,
      y: 0,
      z: 10,
      h: 1000,
      w: 1000
    }).color('rgba(3,29,51,0.5)');
  });

  Crafty.scene('GameOver', function() {
    return Crafty.e('GameOverText');
  });

  window.Util = {
    opposite: function(dir) {
      switch (dir) {
        case 'e':
          return 'w';
        case 'w':
          return 'e';
        case 'n':
          return 's';
        default:
          return 'n';
      }
    },
    endAngle: function(dir) {
      switch (dir) {
        case 'e':
          return 0;
        case 's':
          return Math.PI / 2;
        case 'w':
          return Math.PI;
        default:
          return Math.PI * 3 / 2;
      }
    },
    isStraight: function(track) {
      if (track.dir.length === 2) {
        return (__indexOf.call(track.dir, 'e') >= 0 && __indexOf.call(track.dir, 'w') >= 0) || (__indexOf.call(track.dir, 'n') >= 0 && __indexOf.call(track.dir, 's') >= 0);
      } else {
        return false;
      }
    },
    trackAt: function(x, y) {
      var result;
      result = null;
      Crafty("TrackSection").each(function() {
        if (this.at().x === x && this.at().y === y) {
          return result = this;
        }
      });
      return result;
    },
    dirx: function(dir) {
      switch (dir) {
        case 'e':
          return 1;
        case 'w':
          return -1;
        default:
          return 0;
      }
    },
    diry: function(dir) {
      switch (dir) {
        case 'n':
          return -1;
        case 's':
          return 1;
        default:
          return 0;
      }
    },
    heading: function(x, y) {
      if (x === -1) {
        return 'w';
      } else if (x === 1) {
        return 'e';
      } else if (y === -1) {
        return 'n';
      } else if (y === 1) {
        return 's';
      } else {
        return null;
      }
    },
    getTargetDirection: function(track, dir) {
      var idx;
      idx = track.dir.indexOf(Util.opposite(dir));
      if (idx === track.dir.length - 1) {
        return track.dir[idx - 1];
      } else {
        return track.dir[idx + 1];
      }
    },
    assignStations: function() {
      var i;
      i = 0;
      return Crafty('Station').each(function() {
        Crafty.e('2D, Canvas, spr_stop' + ['a', 'b', 'c', 'd', 'e', 'f'][i]).attr({
          x: this.x + (this.facing === 'e' || this.facing === 'w' ? 6 : 20),
          y: this.y - 20,
          z: 99
        });
        return this.letter = ['a', 'b', 'c', 'd', 'e', 'f'][i++];
      });
    },
    gameOver: function(failure) {
      var i, _i, _j, _len, _len1, _ref, _ref1;
      if (GameState.running) {
        GameState.running = false;
        if (failure) {
          _ref = [800, 1600, 2400];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            i = _ref[_i];
            setTimeout(function() {
              return Crafty('Train').each(function() {
                return this._removeSpriteComponent();
              });
            }, i);
          }
          _ref1 = [1200, 2000, 2800];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            i = _ref1[_j];
            setTimeout(function() {
              return Crafty('Train').each(function() {
                return this._addSpriteComponent();
              });
            }, i);
          }
          setTimeout(function() {
            return Crafty.e('FailureText');
          }, 2800);
          return this;
        } else {
          return setTimeout(function() {
            return Crafty.e('VictoryText');
          }, 800);
        }
      }
    },
    createTrain: function(x, y, playerOne, dir) {
      var end, follow, letter, train;
      letter = (playerOne ? 'r' : 'b');
      train = Crafty.e('PlayerTrain').at(x, y).attr('playerOne', playerOne).attr('lastDir', dir).attr('nextDir', dir).addComponent('spr_' + letter + 'train' + dir).findTrack().bindKeyboardTurn((playerOne ? Crafty.keys.Q : (window.singlePlayerMode ? null : Crafty.keys.P)));
      follow = Crafty.e('FollowTrain').at(x - Util.dirx(dir), y - Util.diry(dir)).attr('playerOne', playerOne).attr('lastDir', dir).attr('nextDir', dir).findTrack().attr('front', train).attr('canCurve', false);
      end = Crafty.e('FollowTrain').at(x - 2 * Util.dirx(dir), y - 2 * Util.diry(dir)).attr('playerOne', playerOne).attr('lastDir', dir).attr('nextDir', dir).attr('finale', true).findTrack().attr('front', follow).attr('canCurve', false);
      train.followers = [follow, end];
      follow._moveAlongTrack(6);
      end._moveAlongTrack(12);
      return train;
    },
    setupFromTiled: function(tiledmap) {
      var firstTrain, prop, secondTrain, tile, tilecode, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
      _ref = tiledmap.getEntitiesInLayer('Tracks');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tile = _ref[_i];
        tile.addComponent('TrackSection');
        for (prop in tile.__c) {
          if (prop.substring(0, 4) === 'Tile') {
            tilecode = prop.substring(4);
            switch (tilecode) {
              case '1':
                tile.dir = ['e', 's'];
                break;
              case '2':
                tile.dir = ['w', 's'];
                break;
              case '7':
                tile.dir = ['n', 'e'];
                break;
              case '8':
                tile.dir = ['n', 'w'];
                break;
              case '13':
                tile.dir = ['e', 'w'];
                break;
              case '14':
                tile.dir = ['n', 's'];
                break;
              case '19':
                tile.dir = ['w', 'e', 'n'];
                break;
              case '20':
                tile.dir = ['w', 'e', 's'];
                break;
              case '25':
                tile.dir = ['s', 'n', 'e'];
                break;
              case '26':
                tile.dir = ['s', 'n', 'w'];
                break;
              case '27':
                tile.dir = ['s', 'n', 'e', 'w'];
                break;
              case '31':
                tile.dir = ['e', 'w', 's'];
                break;
              case '32':
                tile.dir = ['e', 'w', 'n'];
                break;
              case '37':
                tile.dir = ['n', 's', 'e'];
                break;
              case '38':
                tile.dir = ['n', 's', 'w'];
            }
          }
        }
      }
      _ref1 = tiledmap.getEntitiesInLayer('Stations');
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        tile = _ref1[_j];
        for (prop in tile.__c) {
          if (prop.substring(0, 4) === 'Tile') {
            tilecode = prop.substring(4);
            if (tilecode === '29' || tilecode === '30' || tilecode === '33' || tilecode === '34' || tilecode === '35' || tilecode === '36' || tilecode === '39' || tilecode === '40' || tilecode === '41' || tilecode === '42' || tilecode === '43' || tilecode === '44' || tilecode === '45' || tilecode === '46' || tilecode === '47' || tilecode === '48' || tilecode === '49' || tilecode === '50' || tilecode === '53' || tilecode === '54' || tilecode === '62' || tilecode === '63' || tilecode === '64') {
              Crafty.e('2D, Canvas, LightLayer, spr_light' + tilecode).attr({
                x: tile.x,
                y: tile.y,
                z: 11
              });
            }
            switch (tilecode) {
              case '35':
                tile.addComponent('Station').setupAttach('w');
                break;
              case '36':
                tile.addComponent('Station').setupAttach('e');
                break;
              case '45':
                tile.addComponent('Station').setupAttach('n');
                break;
              case '47':
                tile.addComponent('Station').setupAttach('s');
            }
          }
        }
      }
      _ref2 = tiledmap.getEntitiesInLayer('Trains');
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        tile = _ref2[_k];
        tile.addComponent('Actor');
        for (prop in tile.__c) {
          if (prop.substring(0, 4) === 'Tile') {
            tilecode = prop.substring(4);
            switch (tilecode) {
              case '9':
                firstTrain = Util.createTrain(tile.at().x, tile.at().y, true, 'e');
                break;
              case '10':
                firstTrain = Util.createTrain(tile.at().x, tile.at().y, true, 'n');
                break;
              case '11':
                firstTrain = Util.createTrain(tile.at().x, tile.at().y, true, 'w');
                break;
              case '12':
                firstTrain = Util.createTrain(tile.at().x, tile.at().y, true, 's');
                break;
              case '21':
                secondTrain = Util.createTrain(tile.at().x, tile.at().y, false, 'e');
                break;
              case '22':
                secondTrain = Util.createTrain(tile.at().x, tile.at().y, false, 'n');
                break;
              case '23':
                secondTrain = Util.createTrain(tile.at().x, tile.at().y, false, 'w');
                break;
              case '24':
                secondTrain = Util.createTrain(tile.at().x, tile.at().y, false, 's');
            }
            tile.destroy();
          }
        }
      }
      _ref3 = tiledmap.getEntitiesInLayer('Props');
      for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
        tile = _ref3[_l];
        tile.attr('z', 9);
        for (prop in tile.__c) {
          if (prop.substring(0, 4) === 'Tile') {
            tilecode = prop.substring(4);
            if (tilecode === '29' || tilecode === '30' || tilecode === '33' || tilecode === '34' || tilecode === '25' || tilecode === '36' || tilecode === '39' || tilecode === '40' || tilecode === '41' || tilecode === '42' || tilecode === '43' || tilecode === '44' || tilecode === '45' || tilecode === '46' || tilecode === '47' || tilecode === '48' || tilecode === '49' || tilecode === '50' || tilecode === '53' || tilecode === '54' || tilecode === '62' || tilecode === '63' || tilecode === '64' || tilecode === '67' || tilecode === '68' || tilecode === '69' || tilecode === '73' || tilecode === '74' || tilecode === '76' || tilecode === '79' || tilecode === '80') {
              Crafty.e('2D, Canvas, LightLayer, spr_light' + tilecode).attr({
                x: tile.x,
                y: tile.y,
                z: 11
              });
            }
          }
        }
      }
      if (firstTrain) {
        Crafty.e('PlayerScore').attr({
          "x": 0,
          "y": 512
        }).attr({
          train: firstTrain,
          playerOne: true
        }).setup();
      }
      if (secondTrain) {
        return Crafty.e('PlayerScore').attr({
          "x": 392,
          "y": 512
        }).attr("train", secondTrain).setup();
      }
    },
    sunrise: function(percent) {
      if (percent < 0.25) {
        return 'rgba(' + (3 + Math.floor(percent * 400)) + ',' + (29 + Math.floor(percent * 200)) + ',51,' + (1 - percent) / 2 + ')';
      } else {
        return 'rgba(' + (103 - Math.floor((percent - 0.25) * 300)) + ',' + (79 + Math.floor((percent - 0.25) * 60)) + ',' + (51 + Math.floor((percent - 0.25) * 150)) + ',' + (1 - percent) / 2 + ')';
      }
    }
  };

  window.Constants = {
    DIR_PREFIXES: ['n', 'e', 'w', 's'],
    MINUTE_DELAY: 99,
    COLLISION_SIZE: 484,
    TRAIN_SPEED: 1.75,
    TILE_HALF: 14,
    CURVE_QUARTER: 28 * Math.PI / 4,
    ENDING_DIALOGS: [['Oh no!', 'The trains collided!', 'You caused an accident!', 'What a disaster!', 'That wasn\'t supposed to happen!'], ['If anyone asks, you weren\'t having a competition.', 'You know, this is really everyone\'s fault.', 'You know, this is really everyone\'s fault. Even the passengers.', 'Some passengers were jostled, many more were late for work.', 'Remember, you\'re supposed to AVOID each other.', 'What kind of urban planner designed this place, anyway?!']],
    MAX_PASSENGERS: 100,
    FULL_SPEED: 1.75,
    REDUCED_SPEED: 0.875
  };

  window.GameState = {
    running: false
  };

  window.GameClock = {
    newDay: function() {
      this.hour = 6;
      return this.minute = 0;
    },
    update: function() {
      if (this.minute >= 59) {
        this.hour += 1;
        return this.minute = 0;
      } else {
        return this.minute += 1;
      }
    }
  };

  $.getJSON('./maps.json', function(mapListSource) {
    return window.MapList = mapListSource;
  });

}).call(this);
