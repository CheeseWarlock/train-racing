// Generated by CoffeeScript 1.6.3
/*
Grid: for entities that might want to snap to a grid.
*/


(function() {
  Crafty.c("Grid", {
    init: function() {
      this.attr({
        w: Game.map_grid.tile.width,
        h: Game.map_grid.tile.height
      });
    },
    at: function(x, y) {
      if (x === undefined && y === undefined) {
        return {
          x: this.x / Game.map_grid.tile.width,
          y: this.y / Game.map_grid.tile.height
        };
      } else {
        this.attr({
          x: x * Game.map_grid.tile.width,
          y: y * Game.map_grid.tile.height
        });
        return this;
      }
    }
  });

  /*
  Actor: shorthand for 2D entities using a grid.
  */


  Crafty.c("Actor", {
    init: function() {
      this.requires("2D, Canvas, Grid");
    }
  });

  /*
  Train: moves along track, contains movement logic.
  */


  Crafty.c("Train", {
    init: function() {
      this.requires((window.HEADLESS_MODE ? "2D, Grid" : "Actor, Keyboard"));
      this.speed = Constants.FULL_SPEED;
      this.playerOne = false;
      this.angle = 0;
      this.curveCommandEnabled = false;
      this.progress = 0;
      this.targetDirection;
      this.sourceDirection;
      this.distanceTraveled = 0;
    },
    checkCollision: function() {
      var collisionFound, other;
      other = this;
      collisionFound = false;
      Crafty("Train").each(function() {
        if (this.playerOne !== other.playerOne ? Math.sqrt((other.x - this.x) * (other.x - this.x)) + Math.sqrt((other.y - this.y) * (other.y - this.y)) < Constants.COLLISION_SIZE : void 0) {
          collisionFound = true;
        }
      });
      return collisionFound;
    },
    findTrack: function() {
      var currentTrack;
      currentTrack = Util.trackAt(this.at().x, this.at().y);
      this.currentTrack = currentTrack;
      this.angle = Util.endAngle(currentTrack.dir[1]);
      return this;
    },
    isCurving: function() {
      return this.sourceDirection !== this.targetDirection;
    },
    _finishSection: function(dir) {
      if (this.reversing) {
        if (true && !(this._hasCurveOption() && this._hasStraightOption()) && this.currentTrack.dir.length === 3) {
          this.curves.push(this._hasCurveOption());
        }
      }
      this.angle = Util.endAngle(dir);
      this.x = this.currentTrack.x + Util.dirx(dir) * Constants.TILE_HALF;
      this.y = this.currentTrack.y + Util.diry(dir) * Constants.TILE_HALF;
      this.sourceDirection = this.targetDirection;
      this._updateCurrentTrack(dir);
      if (this._arriveAtStation != null) {
        this._arriveAtStation();
      }
    },
    _hasStraightOption: function() {
      return this.currentTrack.dir.indexOf(this.sourceDirection) > -1;
    },
    _hasCurveOption: function() {
      return this.currentTrack.dir.length === 3 && (this.currentTrack.dir.indexOf(Util.opposite(this.sourceDirection)) > 0) || this.currentTrack.dir.length === 2 && this.currentTrack.dir.indexOf(this.sourceDirection) === -1;
    },
    moveAlongTrack: function(dist) {
      var remainingTries, temp;
      this.distanceTraveled += dist;
      this.reversing = dist < 0;
      if (this.reversing) {
        this.angle = this.angle + Math.PI;
        if (this.isCurving()) {
          this.progress = Constants.TILE_HALF * Math.PI / 2 - this.progress;
        } else {
          this.progress = -this.progress;
        }
        dist = -dist;
        temp = this.sourceDirection;
        this.sourceDirection = Util.opposite(this.targetDirection);
        this.targetDirection = Util.opposite(temp);
      }
      this.remainingDist = dist;
      remainingTries = Constants.TILE_JUMP_LIMIT;
      this._removeSpriteComponent();
      this._addSpriteComponent();
      while (this.remainingDist > 0 && remainingTries-- > 0) {
        if (this.isCurving()) {
          this._moveCurved();
        } else {
          this._moveStraight();
        }
      }
      if (this.lightLayer) {
        this.lightLayer.attr({
          x: this.x,
          y: this.y
        });
      }
      if (this.reversing) {
        this.angle = this.angle - Math.PI;
        temp = this.sourceDirection;
        this.sourceDirection = Util.opposite(this.targetDirection);
        this.targetDirection = Util.opposite(temp);
        if (this.isCurving()) {
          this.progress = Constants.TILE_HALF * Math.PI / 2 - this.progress;
        } else {
          this.progress = -this.progress;
        }
      }
    },
    _moveStraight: function() {
      this.progress = Util.dirx(this.sourceDirection) * (this.x - this.currentTrack.x) + Util.diry(this.sourceDirection) * (this.y - this.currentTrack.y);
      if (this.progress < Constants.TILE_HALF - this.remainingDist) {
        this.move(this.sourceDirection, this.remainingDist);
        this.remainingDist = 0;
      } else {
        this._finishSection(this.sourceDirection);
        this.remainingDist -= Constants.TILE_HALF - this.progress;
        this.progress = 0;
      }
    },
    _moveCurved: function() {
      var angularDiff, counterClockwise, _ref;
      counterClockwise = ((_ref = this.sourceDirection + this.targetDirection) === "en" || _ref === "nw" || _ref === "ws" || _ref === "se" ? -1 : 1);
      angularDiff = 1 / (Constants.TILE_HALF * 2) * this.remainingDist * counterClockwise;
      if (this.progress < Constants.CURVE_QUARTER - this.remainingDist) {
        this.angle += angularDiff;
        this.x += Math.cos(this.angle) * (Math.sin(angularDiff) * (Constants.TILE_HALF * 2)) * counterClockwise;
        this.y += Math.sin(this.angle) * (Math.sin(angularDiff) * (Constants.TILE_HALF * 2)) * counterClockwise;
        this.progress += this.remainingDist;
        this.angle += angularDiff;
        this.remainingDist = 0;
      } else {
        this._finishSection(this.targetDirection);
        this.remainingDist -= Constants.CURVE_QUARTER - this.progress;
        this.progress = 0;
      }
    }
  });

  /*
  TrainHead: the first car of a train. Master of the movement of its train.
  */


  Crafty.c("TrainHead", {
    init: function() {
      this.requires("Train");
      this.passengers = 0;
      this.delivered = 0;
      this.followers = [];
      if (!window.HEADLESS_MODE) {
        this.lightLayer = Crafty.e("2D, Canvas, LightLayer").attr({
          z: 1000
        });
      }
    },
    _addSpriteComponent: function(dir) {
      if (!window.HEADLESS_MODE) {
        this.addComponent("spr_" + (this.playerOne ? "r" : "b") + "train" + (this.isCurving() && this.progress > Constants.TILE_HALF * Math.PI / 4 ? this.targetDirection : this.sourceDirection));
        this.lightLayer.addComponent("spr_" + (this.playerOne ? "r" : "b") + "train" + (this.isCurving() && this.progress > Constants.TILE_HALF * Math.PI / 4 ? this.targetDirection : this.sourceDirection) + "light");
      }
    },
    _removeSpriteComponent: function() {
      var baseSpriteName, i;
      if (!window.HEADLESS_MODE) {
        baseSpriteName = "spr_" + (this.playerOne ? "r" : "b") + "train";
        for (i in Constants.DIR_PREFIXES) {
          this.removeComponent(baseSpriteName + Constants.DIR_PREFIXES[i], false);
          this.lightLayer.removeComponent(baseSpriteName + Constants.DIR_PREFIXES[i] + "light", false);
        }
      }
    },
    _setBraking: function(braking) {
      var playerOne;
      if (braking) {
        if (!this.arrow) {
          this.arrow = Crafty.e("DirectionArrow").attr({
            x: this.x,
            y: this.y - 30
          }).attr({
            target: this
          });
        }
      } else {
        if (this.arrow) {
          this.arrow.destroy();
          this.arrow = null;
        }
      }
      this.curveCommandEnabled = braking;
      playerOne = this.playerOne;
      Crafty("Train").each(function() {
        if (this.playerOne === playerOne) {
          this.speed = (braking ? Constants.REDUCED_SPEED : Constants.FULL_SPEED);
        }
      });
    }
  });

  /*
  CarryingTrain: a train that "carries" passengers. Data is still stored in the TrainHead.
  */


  Crafty.c("CarryingTrain", {
    init: function() {
      return this.requires("Train");
    },
    _arriveAtStation: function() {
      var passengersGained, station;
      if (this.currentTrack.station) {
        station = this.currentTrack.station;
        this._dropoff(station);
        passengersGained = this._pickup(station);
        this._assignDestinations(passengersGained, station, this.playerOne);
        this._updateStationSprites();
      }
    },
    _dropoff: function(station) {
      var deliveries;
      deliveries = (this.playerOne ? station.dropoffP1 : station.dropoffP2);
      this.head.passengers -= deliveries;
      this.head.delivered += deliveries;
      if (this.playerOne) {
        station.dropoffP1 = 0;
      } else {
        station.dropoffP2 = 0;
      }
    },
    _pickup: function(station) {
      var overflow, pickup, room;
      room = Constants.MAX_PASSENGERS - this.head.passengers;
      overflow = station.population - room;
      pickup = (overflow > 0 ? Constants.MAX_PASSENGERS - this.head.passengers : station.population);
      station.population = (overflow > 0 ? overflow : 0);
      this.head.passengers += pickup;
      return pickup;
    },
    _assignDestinations: function(passengers, boardedAtStation, onPlayerOne) {
      var target, targetCount;
      targetCount = Crafty("Station").length;
      while (passengers > 0) {
        target = Crafty(Crafty("Station")[Math.floor(Math.random() * targetCount)]);
        if (target !== boardedAtStation) {
          if (onPlayerOne) {
            target.dropoffP1++;
          } else {
            target.dropoffP2++;
          }
          passengers--;
        }
      }
    },
    _updateStationSprites: function() {
      Crafty("Station").each(function() {
        return this.updateSprites();
      });
      return Crafty("PlayerScore").each(function() {
        return this.update();
      });
    }
  });

  /*
  PlayerTrain: a train controlled by a player.
  */


  Crafty.c("PlayerTrain", {
    init: function() {
      return this.requires("TrainHead");
    },
    _updateCurrentTrack: function(dir) {
      var backThroughCurve, curve, f, isCurving, straight, _i, _j, _len, _len1, _ref, _ref1;
      backThroughCurve = this.reversing && !(this._hasCurveOption() && this._hasStraightOption()) && this.currentTrack.dir.length === 3;
      if (backThroughCurve) {
        _ref = this.followers;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          f = _ref[_i];
          f.curves.shift();
        }
      }
      this.currentTrack = Util.trackAt(this.currentTrack.at().x + Util.dirx(dir), this.currentTrack.at().y + Util.diry(dir));
      straight = this._hasStraightOption();
      curve = this._hasCurveOption();
      this.targetDirection = ((straight && curve && this.curveCommandEnabled) || (curve && !straight) ? Util.getTargetDirection(this.currentTrack, this.sourceDirection) : this.sourceDirection);
      if (straight && curve) {
        isCurving = this.isCurving();
        _ref1 = this.followers;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          f = _ref1[_j];
          f.curves.push(isCurving);
        }
      }
    },
    bindKeyboardTurn: function(keyCode) {
      if (keyCode != null) {
        this.bind("KeyDown", (function(e) {
          return function(e) {
            if (e.keyCode === keyCode) {
              return this._setBraking(true);
            }
          };
        })(keyCode));
        this.bind("KeyUp", (function(e) {
          return function(e) {
            if (e.keyCode === keyCode) {
              return this._setBraking(false);
            }
          };
        })(keyCode));
        return this;
      } else {
        return this.bind("EnterFrame", function() {
          if (this.speed === Constants.REDUCED_SPEED) {
            if (Math.random() > 0.925) {
              this._setBraking(false);
            }
          } else {
            if (Math.random() > 0.94) {
              this._setBraking(true);
            }
          }
        });
      }
    }
  });

  /*
  FollowTrain: a train car that follows a TrainHead or another FollowTrain.
  */


  Crafty.c("FollowTrain", {
    init: function() {
      this.requires("Train");
      this.curves = [];
      if (!window.HEADLESS_MODE) {
        this.lightLayer = Crafty.e("2D, Canvas, LightLayer").attr({
          z: 1000
        });
      }
    },
    _addSpriteComponent: function() {
      var dir, spriteName;
      if (!window.HEADLESS_MODE) {
        dir = (this.isCurving() && this.progress > Constants.TILE_HALF * Math.PI / 4 ? this.targetDirection : this.sourceDirection);
        spriteName = "spr_" + (this.playerOne ? "r" : "b") + "train" + (dir === "n" || dir === "s" ? "side" : "");
        this.addComponent(spriteName);
        this.lightLayer.addComponent(spriteName + "light");
      }
    },
    _removeSpriteComponent: function() {
      var baseSpriteName;
      if (!window.HEADLESS_MODE) {
        baseSpriteName = "spr_" + (this.playerOne ? "r" : "b") + "train";
        this.removeComponent(baseSpriteName, false).removeComponent(baseSpriteName + "side", false);
        this.lightLayer.removeComponent(baseSpriteName + "light", false).removeComponent(baseSpriteName + "sidelight", false);
      }
    },
    _updateCurrentTrack: function(dir) {
      var curve, straight;
      this.currentTrack = Util.trackAt(this.currentTrack.at().x + Util.dirx(dir), this.currentTrack.at().y + Util.diry(dir));
      curve = this._hasCurveOption();
      straight = this._hasStraightOption();
      this.targetDirection = ((curve && straight && (this.curves.shift() || false)) || (curve && !straight) ? Util.getTargetDirection(this.currentTrack, this.sourceDirection) : this.sourceDirection);
    }
  });

  /*
  AITrain: a train controlled by AI.
  */


  Crafty.c("AITrain", {
    init: function() {
      return this.requires("TrainHead");
    },
    _updateCurrentTrack: function(dir) {
      var backThroughCurve, curve, curvedPriority, curvedSegment, decision, dropoffPlayer, f, isCurving, searchPlayer, station, straight, straightPriority, straightSegment, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
      backThroughCurve = this.reversing && !(this._hasCurveOption() && this._hasStraightOption()) && this.currentTrack.dir.length === 3;
      if (backThroughCurve) {
        _ref = this.followers;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          f = _ref[_i];
          f.curves.shift();
        }
      }
      this.currentTrack = Util.trackAt(this.currentTrack.at().x + Util.dirx(dir), this.currentTrack.at().y + Util.diry(dir));
      if (this._arriveAtStation != null) {
        this._arriveAtStation();
      }
      straight = this._hasStraightOption();
      curve = this._hasCurveOption();
      if (straight && curve) {
        searchPlayer = (this.playerOne ? "playerTwo" : "playerOne");
        dropoffPlayer = (this.playerOne ? "dropoffP1" : "dropoffP2");
        straightSegment = AI.checkAlongSegment(this.currentTrack.at().x + Util.dirx(this.sourceDirection), this.currentTrack.at().y + Util.diry(this.sourceDirection), this.sourceDirection);
        curvedSegment = AI.checkAlongSegment(this.currentTrack.at().x + Util.dirx(Util.getTargetDirection(this.currentTrack, this.sourceDirection)), this.currentTrack.at().y + Util.diry(Util.getTargetDirection(this.currentTrack, this.sourceDirection)), Util.getTargetDirection(this.currentTrack, this.sourceDirection));
        straightPriority = 0;
        curvedPriority = 0;
        _ref1 = straightSegment.stations;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          station = _ref1[_j];
          straightPriority += station.population + station[dropoffPlayer];
        }
        _ref2 = curvedSegment.stations;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          station = _ref2[_k];
          curvedPriority += station.population + station[dropoffPlayer];
        }
        straightPriority += (straightSegment.trainsFound[searchPlayer] ? -100 : 0);
        curvedPriority += (curvedSegment.trainsFound[searchPlayer] ? -100 : 0);
        straightPriority += Math.random() * 20 - 10;
        decision = curvedPriority > straightPriority;
      }
      this.targetDirection = ((straight && curve && decision) || (curve && !straight) ? Util.getTargetDirection(this.currentTrack, this.sourceDirection) : this.sourceDirection);
      if (straight && curve) {
        isCurving = this.isCurving();
        _ref3 = this.followers;
        for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
          f = _ref3[_l];
          f.curves.push(isCurving);
        }
      }
    }
  });

  /*
  Track section: a 1x1 piece of track with two or more dirs.
  */


  Crafty.c("TrackSection", {
    init: function() {
      this.requires("2D, Grid");
    },
    associateStation: function(station) {
      this.station = station;
    }
  });

  /*
  Station: associated with a track, has passenger values.
  */


  Crafty.c("Station", {
    init: function() {
      this.population = 0;
      this.dropoffP1 = 0;
      this.dropoffP2 = 0;
      this.popular = false;
      this.requires("2D, Grid");
      this.bind("EnterFrame", function() {
        if (GameState.running) {
          this.populate();
        }
      });
    },
    setPopular: function(popular) {
      var letter;
      letter = this.letter;
      this.popular = !this.popular;
      Crafty("spr_" + (this.popular ? "" : "p") + "stop" + this.letter).each(function() {
        this.removeComponent("spr_" + (this.popular ? "" : "p") + "stop" + letter, false);
        this.addComponent("spr_" + (this.popular ? "p" : "") + "stop" + letter);
      });
    },
    setup: function(x, y, dir) {
      this.at(x, y);
      this.setupAttach(dir);
    },
    setupAttach: function(dir) {
      var x, y;
      x = this.at().x;
      y = this.at().y;
      this.facing = dir;
      if (dir === "s") {
        this.attachToTrack(x, y + 1).attachToTrack(x + 1, y + 1);
      } else if (dir === "n") {
        this.attachToTrack(x, y - 1).attachToTrack(x + 1, y - 1);
      } else {
        this.attachToTrack(x + Util.dirx(dir), y).attachToTrack(x + Util.dirx(dir), y + 1);
      }
      this.setupText();
    },
    setupText: function() {
      this.t = [];
      this.previousWaiting = 0;
      this.updateSprites();
    },
    populate: function() {
      if (!this.numStations) {
        this.numStations = Crafty("Station").length;
      }
      if (Math.random() > ((this.popular ? 0.917 : 0.947) + 0.005 * this.numStations)) {
        this.population += 1;
        this.updateSprites();
      }
    },
    attachToTrack: function(x, y) {
      Util.trackAt(x, y).associateStation(this);
      return this;
    },
    updateSprites: function() {
      var pos, remaining, x, y;
      if (!window.HEADLESS_MODE) {
        if (this.population / 12.0 === this.t.length + 1) {
          remaining = Math.min(this.population, 72) - this.t.length * 12;
          pos = this.t.length;
          if (this.facing === "w") {
            x = this._x + 6 * (pos % 2);
            y = this._y + 2 + 8 * pos;
          } else if (this.facing === "e") {
            x = this._x + 20 - 6 * (pos % 2);
            y = this._y + 2 + 8 * pos;
          } else {
            x = this._x + 2 + 8 * pos;
            y = this._y + 12 + 4 * (pos % 2);
          }
          while (remaining >= 12) {
            this.t.push(Crafty.e("StationPerson").attr({
              x: x,
              y: y
            }).fadeIn(this.facing));
            remaining -= 12;
            pos++;
          }
        } else {
          while (this.t.length > this.population / 12) {
            this.t[this.t.length - 1].fadeOut();
            this.t.splice(this.t.length - 1, 1);
          }
        }
        return this;
      }
    }
  });

  /*
  */


  Crafty.c("StationPerson", {
    init: function() {
      this.requires("2D, Canvas, spr_person00");
    },
    fadeIn: function(dir) {
      var i;
      this.alpha = 0;
      this.x -= Util.dirx(dir) * 10;
      this.y -= Util.diry(dir) * 10;
      i = 0;
      while (i <= 9) {
        setTimeout((function(o, dir) {
          return function() {
            o.attr({
              alpha: o.alpha + 0.1,
              x: o.x + Util.dirx(dir),
              y: o.y + Util.diry(dir)
            });
          };
        })(this, dir), i * 50);
        i++;
      }
      return this;
    },
    fadeOut: function() {
      var delay, i;
      delay = Math.random() * 300;
      i = 0;
      while (i <= 9) {
        setTimeout((function(o) {
          return function() {
            o.attr({
              alpha: o.alpha - 0.1,
              y: o._y - 3 * (o.alpha - 0.6)
            });
            if (o.alpha < 0.1) {
              o.destroy();
            }
          };
        })(this), i * 50 + delay);
        i++;
      }
      return this;
    }
  });

  Crafty.c("PlayerScore", {
    init: function() {
      this.requires("2D, DOM, Text").textFont({
        size: "20px",
        family: "Aller"
      });
      this.display = 0;
      this.attr({
        h: 47,
        w: 270
      });
      this.css({
        padding: 5,
        backgroundColor: "none",
        margin: 10
      });
      this.bind("EnterFrame", function() {
        if (this.display !== this.train.passengers) {
          if (this.display > this.train.passengers) {
            this.display--;
          } else {
            this.display++;
          }
        }
        this.text(this.display + "% Full");
      });
    },
    setup: function() {
      this.bar = Crafty.e("BarController").attr({
        x: this.x + 10,
        y: this.y
      }).attr({
        playerOne: this.playerOne
      }).setup().update();
      this.attr({
        z: 800
      });
    },
    update: function() {
      var p, x;
      if (this.train) {
        x = [];
        p = this.playerOne;
        Crafty("Station").each(function() {
          var t;
          t = (p ? this.dropoffP1 : this.dropoffP2);
          if (t > 1) {
            x.push([t, this.letter, this.popular]);
          }
        });
        x.sort(function(a, b) {
          return b[0] - a[0];
        });
        this.bar.update(this.train.passengers, x);
      }
    }
  });

  Crafty.c("DirectionArrow", {
    init: function() {
      this.requires("Actor, spr_arrowsign").attr({
        z: 1000
      }).bind("EnterFrame", function() {
        if (GameState.running) {
          this.x = this.target.x;
          this.y = this.target.y - 30;
        }
      });
    }
  });

  Crafty.c("Dialog", {
    init: function() {
      this.requires("2D, DOM, Text").css({
        backgroundColor: "#2B281D",
        textAlign: "center",
        border: "4px solid #FFFDE8"
      }).textFont({
        size: "30px",
        family: "Aller"
      }).textColor("#FFFDE8");
      this.attr({
        x: 0,
        y: 112,
        w: 268,
        h: 130
      });
    }
  });

  Crafty.c("ClockController", {
    init: function() {
      GameClock.newDay();
      if (!window.HEADLESS_MODE) {
        this.pauseAvailable = true;
        this.paused = false;
        this.requires("Dialog").attr({
          x: 234,
          y: 492,
          w: 140,
          h: 44
        }).textColor("#84FFEC").textFont({
          size: "43px",
          family: "Minisystem"
        }).css({
          letterSpacing: "-2px",
          border: "4px solid #606060",
          textShadow: "0px 0px 2px #84FFEC"
        });
        this.bind("KeyDown", function(e) {
          if (e.keyCode === Crafty.keys.SPACE && (GameState.running || this.paused)) {
            if (this.pauseAvailable) {
              Crafty.e("PauseText");
              this.pauseAvailable = false;
              GameState.running = false;
              this.paused = true;
            } else if (this.paused) {
              Crafty("PauseText").teardown();
              Crafty("PauseText").destroy();
              GameState.running = true;
              this.paused = false;
            }
          }
        });
        this.text(GameClock.hour + (GameClock.minute > 9 ? ":" : ":0") + GameClock.minute);
      }
      this.tickDelay = 0;
      this.bind("EnterFrame", function(data) {
        var percentTimePassed;
        percentTimePassed = Math.max(0, (GameClock.hour - 6) / 4 + (GameClock.minute / 240));
        if (GameState.running) {
          this.tickDelay += data.dt / 20;
          GameClock.elapsed += data.dt / 20;
        }
        if (GameState.running && (this.tickDelay > Constants.MINUTE_LENGTH)) {
          GameClock.update();
          this.tickDelay -= Constants.MINUTE_LENGTH;
          if (GameClock.hour === 10) {
            Util.gameOver(false);
          }
          if (!window.HEADLESS_MODE) {
            this.text(GameClock.hour + (GameClock.minute > 9 ? ":" : ":0") + +GameClock.minute);
            Crafty("AmbientLayer").each(function() {
              this.color(Util.sunrise(percentTimePassed));
            });
            Crafty("LightLayer").each(function() {
              this.attr("alpha", 1 - percentTimePassed);
            });
          }
        }
      });
      GameState.running = true;
    }
  });

  /*
  Controls train movement. Makes sure all trains move before checking collision.
  */


  Crafty.c("TrainController", {
    init: function() {
      this.bind("EnterFrame", function(data) {
        if (GameState.running && GameClock.hour > 5) {
          Crafty("Train").each(function() {
            this.moveAlongTrack(this.speed * data.dt / 20);
          });
          Crafty("Train").each(function() {
            this.attr("z", Math.floor(this.y));
            if (this.checkCollision()) {
              Util.gameOver(true);
            }
          });
        }
      });
    }
  });

  Crafty.c("EndingText", {
    init: function() {
      this.requires("Dialog").textFont({
        size: "20px"
      });
      this.display = 0;
      this.attr({
        x: 0,
        y: 112,
        w: 268,
        h: 130
      });
      this.css({
        padding: 20,
        margin: "0px 150px",
        width: 600,
        height: 200,
        boxShadow: "-8px 8px 0px rgba(47,32,16,0.35)"
      });
      this.bind("KeyDown", function(e) {
        if (e.keyCode === Crafty.keys.SPACE) {
          Crafty("TrainController").destroy();
          Crafty.scene("PlayGame");
        }
      });
      Crafty.e("2D, DOM, spr_space").attr({
        x: this.x + 260,
        y: this.y + 152
      });
    }
  });

  Crafty.c("PauseText", {
    init: function() {
      this.requires("Dialog");
      this.text("<br/><br/>Only once a shift!");
      this.css({
        padding: 20,
        margin: "0px 150px",
        width: 600,
        height: 200,
        boxShadow: "-8px 8px 0px rgba(0,0,0,0.4)"
      });
      this.coffee = Crafty.e("2D, DOM, spr_coffee").attr({
        x: this.x + 240,
        y: this.y + 20
      });
      this.space = Crafty.e("2D, DOM, spr_space").attr({
        x: this.x + 260,
        y: this.y + 152
      });
    },
    teardown: function() {
      this.coffee.destroy();
      this.space.destroy();
    }
  });

  Crafty.c("VictoryText", {
    init: function() {
      var p1score, p2score;
      this.requires("EndingText");
      p1score = 0;
      p2score = 0;
      Crafty("PlayerTrain").each(function() {
        if (this.playerOne) {
          p1score = this.delivered;
        } else {
          p2score = this.delivered;
        }
      });
      if (p1score !== p2score) {
        this.css({
          border: "4px solid #" + (p1score > p2score ? "E23228" : "4956FF"),
          borderTop: "4px solid #" + (p1score > p2score ? "FF817C" : "848EFF"),
          borderBottom: "4px solid #" + (p1score > p2score ? "B71607" : "1E2DCE")
        });
      }
      this.text("The morning rush is over!<br/>Passengers delivered:<br/>Red: " + p1score + ", Blue: " + p2score + "<br/>" + (p1score === p2score ? "It's a Draw!" : (p1score > p2score ? "Red" : "Blue") + " Line wins!") + "<br/>Total deliveries: " + (p1score + p2score));
    }
  });

  Crafty.c("FailureText", {
    init: function() {
      this.requires("EndingText");
      this.text(Constants.ENDING_DIALOGS[0][Math.floor(Math.random() * Constants.ENDING_DIALOGS[0].length)] + "<br/>" + Constants.ENDING_DIALOGS[1][Math.floor(Math.random() * Constants.ENDING_DIALOGS[1].length)]);
    }
  });

  Crafty.c("BarController", {
    init: function() {
      this.requires("2D, Canvas").attr({
        z: 800
      });
    },
    setup: function() {
      var c;
      this.attr({
        h: 20,
        w: 20
      });
      c = (this.playerOne ? "r" : "b");
      Crafty.e("2D, Canvas, spr_barback").attr({
        x: this.x,
        y: this.y,
        z: 801
      });
      this.l = Crafty.e("2D, Canvas, spr_" + c + "barl").attr({
        x: this.x,
        y: this.y,
        z: 801
      });
      this.b = Crafty.e("2D, Canvas, spr_" + c + "bar").attr({
        w: 0,
        x: this.x + 4,
        y: this.y,
        z: 801
      });
      this.r = Crafty.e("2D, Canvas, spr_" + c + "barr").attr({
        x: this.x + 4,
        y: this.y,
        z: 801
      });
      return this;
    },
    update: function(fullness, ticks) {
      var attempt, d, i, previous;
      this.attr({
        x: this.x,
        y: this.y,
        z: 801
      });
      this.l.attr({
        x: this.x,
        y: this.y,
        z: 801
      });
      this.b.attr({
        x: this.x + 4,
        w: (fullness > 4 ? fullness * 2 - 8 : 0),
        z: 801
      });
      this.r.attr({
        x: (fullness > 2 && ticks.length ? this.x - 4 + fullness * 2 : this.x + 4),
        z: 801
      });
      for (i in this.ticks) {
        this.ticks[i].destroy();
      }
      this.ticks = [];
      for (i in this.stops) {
        this.stops[i].destroy();
      }
      this.stops = [];
      d = -2;
      previous = 0;
      for (i in ticks) {
        if (ticks[i][0] > 0) {
          attempt = this.x + d + ((ticks[i][0] | 1) - 1) - 6;
          while (i > 0 && attempt < previous + 12) {
            attempt += 2;
          }
          this.stops.push(Crafty.e("2D, Canvas, spr_" + (ticks[i][2] ? "p" : "") + "stop" + ticks[i][1]).attr({
            x: attempt,
            y: this.y - 22,
            z: 801
          }));
          previous = attempt;
        }
        if (i < ticks.length - 1) {
          d += ticks[i][0] * 2;
          this.ticks.push(Crafty.e("2D, Canvas, spr_" + (this.playerOne ? "r" : "b") + "bart").attr({
            x: this.x + d,
            y: this.y,
            z: 801
          }));
        }
      }
      return this;
    }
  });

  /*
  A line of text to simplify the title screen.
  */


  Crafty.c("TitleText", {
    init: function() {
      this.requires("2D, DOM, Text").attr({
        x: 0,
        w: 616
      }).css({
        textAlign: "center"
      }).textFont({
        size: "17px",
        family: "Aller"
      }).textColor("#FFFDE8");
    }
  });

  $(document).ready(function() {
    window.singlePlayerMode = false;
    $(window).keydown(function(e) {
      if (!window.dontGoAway && !($(e.target).is("textarea, a"))) {
        $('#display-manual').hide();
        $('#display-design').hide();
      }
      window.dontGoAway = false;
      return true;
    });
    $("body").click(function(e) {
      if (!($(e.target).is("textarea, a"))) {
        $('#display-manual').hide();
        return $('#display-design').hide();
      }
    });
    $('.linkbar a:nth-child(1)').click(function() {
      if ($('#display-manual:visible').length) {
        $('#display-manual').hide();
      } else {
        $('#display-design').hide();
        $('#display-manual').show();
      }
      return false;
    });
    return $('.linkbar a:nth-child(2)').click(function() {
      if ($('#display-design:visible').length) {
        $('#display-design').hide();
      } else {
        $('#display-manual').hide();
        $('#display-design').show();
      }
      return false;
    });
  });

  window.Game = {
    map_grid: {
      width: 22,
      height: 20,
      tile: {
        width: 28,
        height: 28
      }
    },
    width: function() {
      return this.map_grid.width * this.map_grid.tile.width;
    },
    height: function() {
      return this.map_grid.height * this.map_grid.tile.height;
    },
    start: function() {
      window.HEADLESS_MODE = false;
      Crafty.init(Game.width(), Game.height(), "game-stage");
      Crafty.pixelart(true);
      Crafty.background('#2B281D');
      Crafty.scene('Loading');
      return this;
    },
    startHeadless: function() {
      window.HEADLESS_MODE = true;
      Crafty.init(Game.width(), Game.height(), "game-stage");
      Crafty.background('#2B281D');
      $.getJSON("map1.json", function(data) {
        window.selectedMap = data;
        return Crafty.scene('PlayGame');
      });
      return this;
    }
  };

  Crafty.scene('Title', function() {
    this.letters = "";
    Crafty.e('2D, Canvas, spr_title').attr({
      x: 220
    });
    Crafty.e('TitleText').attr({
      y: 163
    }).text('Compete to deliver more passengers by 10:00 AM!');
    Crafty.e('TitleText').attr({
      y: 218
    }).text('Hold your key to slow down and turn at junctions:');
    Crafty.e('2D, Canvas, spr_keyq').attr({
      x: 194,
      y: 270
    });
    Crafty.e('2D, DOM, Text').attr({
      x: 161,
      y: 318,
      w: 200
    }).text('Red Train').textFont({
      size: '26px',
      family: 'Aller'
    }).textColor('#E23228');
    Crafty.e('2D, Canvas, spr_keyp, nobots').attr({
      x: 375,
      y: 270
    });
    Crafty.e('2D, DOM, Text, nobots').attr({
      x: 338,
      y: 318,
      w: 200
    }).text('Blue Train').textFont({
      size: '26px',
      family: 'Aller'
    }).textColor('#4956FF');
    Crafty.e('TitleText').attr({
      y: 376
    }).text('Your passengers\' destinations are shown at the bottom.');
    Crafty.e('TitleText').attr({
      y: 431
    }).text('Avoid collisions at all costs!');
    Crafty.e('2D, Canvas, spr_space').attr({
      x: 264,
      y: 483
    });
    return Crafty.e('2D, Keyboard').bind('KeyDown', function(e) {
      if (e.keyCode === Crafty.keys.SPACE) {
        Crafty.scene('SelectMap');
      }
      if (e.keyCode === Crafty.keys.P) {
        this.letters += 'P';
      }
      if (e.keyCode === Crafty.keys.Q) {
        this.letters += 'Q';
      }
      if (this.letters.slice(-5) === 'PQPPQ') {
        Crafty("nobots").destroy();
        return window.singlePlayerMode = true;
      }
    });
  });

  Crafty.scene('Loading', function() {
    return Crafty.load(['img/ul.png', 'img/ppl.png', 'img/news.png'], function() {
      var spritenames, test;
      Crafty.sprite(28, 'img/ul.png', {
        spr_rtrain: [2, 0],
        spr_rtrainside: [3, 0],
        spr_rtraine: [2, 1],
        spr_rtrainn: [3, 1],
        spr_rtrainw: [4, 1],
        spr_rtrains: [5, 1],
        spr_btrain: [2, 2],
        spr_btrainside: [3, 2],
        spr_btraine: [2, 3],
        spr_btrainn: [3, 3],
        spr_btrainw: [4, 3],
        spr_btrains: [5, 3],
        spr_arrowsign: [3, 4],
        spr_platform: [4, 6],
        spr_platformu: [2, 7, 2, 1],
        spr_platformd: [4, 7, 2, 1],
        spr_platforml: [4, 5, 1, 2],
        spr_platformr: [5, 5, 1, 2]
      });
      spritenames = {};
      test = function() {
        var a, b, _i, _results;
        _results = [];
        for (a = _i = 0; _i <= 5; a = ++_i) {
          _results.push((function() {
            var _j, _results1;
            _results1 = [];
            for (b = _j = 0; _j <= 5; b = ++_j) {
              _results1.push(spritenames['spr_person' + a + b] = [a, b]);
            }
            return _results1;
          })());
        }
        return _results;
      };
      test();
      Crafty.sprite(8, 12, 'img/ppl.png', spritenames);
      Crafty.sprite(4, 12, 'img/bars.png', {
        spr_rbarl: [0, 0],
        spr_rbar: [1, 0],
        spr_rbart: [2, 0],
        spr_rbarr: [3, 0],
        spr_bbarl: [0, 1],
        spr_bbar: [1, 1],
        spr_bbart: [2, 1],
        spr_bbarr: [3, 1]
      });
      Crafty.sprite(16, 16, 'img/stops.png', {
        spr_stopa: [0, 0],
        spr_stopb: [1, 0],
        spr_stopc: [2, 0],
        spr_stopd: [3, 0],
        spr_stope: [4, 0],
        spr_stopf: [5, 0],
        spr_pstopa: [0, 1],
        spr_pstopb: [1, 1],
        spr_pstopc: [2, 1],
        spr_pstopd: [3, 1],
        spr_pstope: [4, 1],
        spr_pstopf: [5, 1]
      });
      Crafty.sprite(88, 48, 'img/space.png', {
        spr_space: [0, 0]
      });
      Crafty.sprite(48, 40, 'img/keys.png', {
        spr_keyp: [0, 0],
        spr_keyq: [0, 1],
        spr_arrowl: [1, 0],
        spr_arrowr: [1, 1]
      });
      Crafty.sprite(200, 12, 'img/barback.png', {
        spr_barback: [0, 0]
      });
      Crafty.sprite(176, 114, 'img/title.png', {
        spr_title: [0, 0]
      });
      Crafty.sprite(616, 84, 'img/brushed.png', {
        spr_brushed: [0, 0]
      });
      Crafty.sprite(24, 24, 'img/mapselect.png', {
        spr_selectstn: [0, 0],
        spr_selectarrow: [1, 0],
        spr_selectline: [0, 1],
        spr_selectstn2: [1, 1]
      });
      Crafty.sprite(134, 68, 'img/coffee.png', {
        spr_coffee: [0, 0]
      });
      Crafty.sprite(28, 28, 'img/ullight.png', {
        spr_rtrainlight: [2, 0],
        spr_rtrainsidelight: [3, 0],
        spr_rtrainelight: [2, 1],
        spr_rtrainnlight: [3, 1],
        spr_rtrainwlight: [4, 1],
        spr_rtrainslight: [5, 1],
        spr_btrainlight: [2, 2],
        spr_btrainsidelight: [3, 2],
        spr_btrainelight: [2, 3],
        spr_btrainnlight: [3, 3],
        spr_btrainwlight: [4, 3],
        spr_btrainslight: [5, 3],
        spr_light29: [4, 4],
        spr_light30: [5, 4],
        spr_light33: [2, 5],
        spr_light34: [3, 5],
        spr_light35: [4, 5],
        spr_light36: [5, 5],
        spr_light39: [2, 6],
        spr_light40: [3, 6],
        spr_light41: [4, 6],
        spr_light42: [5, 6],
        spr_light43: [0, 7],
        spr_light44: [1, 7],
        spr_light45: [2, 7],
        spr_light46: [3, 7],
        spr_light47: [4, 7],
        spr_light48: [5, 7],
        spr_light49: [0, 8],
        spr_light50: [1, 8],
        spr_light53: [4, 8],
        spr_light54: [5, 8],
        spr_light62: [1, 10],
        spr_light63: [2, 10],
        spr_light64: [3, 10],
        spr_light67: [0, 11],
        spr_light68: [1, 11],
        spr_light69: [2, 11],
        spr_light73: [0, 12],
        spr_light74: [1, 12],
        spr_light76: [3, 12],
        spr_light79: [0, 13],
        spr_light80: [1, 13]
      });
      Crafty.c('LightLayer');
      Crafty.c('AmbientLayer');
      Crafty.scene('Title');
      return this;
    });
  });

  Crafty.scene('SelectMap', function() {
    var curry, idx;
    Crafty.background('#2B281D');
    Crafty.c('MapSelectScrollable');
    curry = 140;
    for (idx in window.MapList) {
      Crafty.e('2D, Canvas, spr_selectstn').attr({
        x: 250,
        y: curry
      });
      Crafty.e('2D, Canvas, Text, aaa').attr({
        x: 280,
        y: curry,
        w: 200
      }).textFont({
        size: '17px',
        family: 'Aller'
      }).textColor('#FFFDE8').text(window.MapList[idx][1]);
      Crafty.e('2D, Canvas, spr_selectline').attr({
        x: 250,
        y: curry + 24
      });
      curry += 48;
    }
    Crafty.e('2D, Canvas, spr_selectstn').attr({
      x: 250,
      y: curry
    });
    Crafty.e('2D, Canvas, Text, aaa').attr({
      x: 280,
      y: curry,
      w: 200
    }).textFont({
      size: '17px',
      family: 'Aller'
    }).textColor('#5CC64C').text("Load Map...");
    Crafty.e('2D, Canvas, spr_selectarrow').attr({
      x: 200,
      y: 140
    });
    Crafty.e('2D, Canvas, spr_space').attr({
      x: 420,
      y: 130
    });
    Crafty.e('2D, Canvas, Color').color('#2B281D').attr({
      y: 0,
      x: 0,
      w: 1000,
      h: 130
    });
    Crafty.e('2D, Canvas, Color').color('#2B281D').attr({
      y: 410,
      x: 0,
      w: 1000,
      h: 150
    });
    Crafty.e('TitleText').text('Select a map:').attr({
      y: 30
    }).textColor('#FFFDE8');
    Crafty.e('TitleText, Keyboard').text(window.MapList[0][1]).attr({
      y: 86,
      selection: 0
    }).textColor('#FFFDE8').textFont({
      size: '30px'
    }).bind('KeyDown', function(e) {
      if (e.keyCode === Crafty.keys.SPACE) {
        if (!window.MapList[this.selection]) {
          try {
            window.selectedMap = JSON.parse($("#custom-level-data").val());
            Crafty.scene('PlayGame');
          } catch (_error) {
            if (!($('#display-design:visible').length)) {
              $('#display-manual').hide();
              $('#display-credits').hide();
              $('#display-design').show();
              window.dontGoAway = true;
            }
          }
        } else {
          $.getJSON(window.MapList[this.selection][0], function(data) {
            window.selectedMap = data;
            return Crafty.scene('PlayGame');
          });
        }
      }
      if (e.keyCode === Crafty.keys.Q) {
        this.selection -= 1;
        if (this.selection === -1) {
          this.selection = window.MapList.length;
          Crafty('spr_selectarrow, spr_space').each(function() {
            return this.attr('y', this._y + 48 * (window.MapList.length + 1));
          });
        }
        this.text(this.selection < window.MapList.length ? window.MapList[this.selection][1] : "Load Map...");
        Crafty('spr_selectarrow, spr_space').each(function() {
          return this.attr('y', this._y - 48);
        });
      }
      if (e.keyCode === Crafty.keys.P) {
        this.selection += 1;
        if (this.selection === window.MapList.length + 1) {
          this.selection = 0;
          Crafty('spr_selectarrow, spr_space').each(function() {
            return this.attr('y', this._y - 48 * (window.MapList.length + 1));
          });
        }
        this.text(this.selection < window.MapList.length ? window.MapList[this.selection][1] : "Load Map...");
        return Crafty('spr_selectarrow, spr_space').each(function() {
          return this.attr('y', this._y + 48);
        });
      }
    }).bind('EnterFrame', function() {
      if (Crafty('spr_selectarrow').y > 284) {
        return Crafty('spr_selectarrow, spr_space, spr_selectstn, spr_selectline, aaa').each(function() {
          return this.y -= 6;
        });
      } else if (Crafty('spr_selectarrow').y < 140 + Math.min(96, this.selection * 48)) {
        return Crafty('spr_selectarrow, spr_space, spr_selectstn, spr_selectline, aaa').each(function() {
          return this.y += 6;
        });
      }
    });
    Crafty.e('2D, Canvas, spr_keyq').attr({
      x: 230,
      y: 430
    });
    Crafty.e('2D, Canvas, spr_keyp').attr({
      x: 338,
      y: 430
    });
    Crafty.e('2D, Canvas, spr_arrowr').attr({
      x: 230,
      y: 480
    });
    return Crafty.e('2D, Canvas, spr_arrowl').attr({
      x: 338,
      y: 480
    });
  });

  Crafty.scene('PlayGame', function() {
    var builder;
    Crafty.background('rgb(80, 160, 40)');
    builder = Crafty.e((window.HEADLESS_MODE ? "" : "2D, Canvas, ") + "TiledMapBuilder");
    builder.setMapDataSource(window.selectedMap).createWorld(Util.setupFromTiled);
    Crafty.e('TrainController');
    Crafty.e('ClockController');
    if (!window.HEADLESS_MODE) {
      Crafty.e('2D, Canvas, spr_brushed').attr({
        w: 616,
        h: 84,
        y: 476,
        z: 800
      });
      Crafty.e('2D, Canvas, Color, AmbientLayer').attr({
        x: 0,
        y: 0,
        z: 600,
        h: 1000,
        w: 1000
      }).color('rgba(3,29,51,0.5)');
    }
    return Util.assignStations();
  });

  Crafty.scene('GameOver', function() {
    return Crafty.e('GameOverText');
  });

  window.Util = {
    opposite: function(dir) {
      switch (dir) {
        case 'e':
          return 'w';
        case 'w':
          return 'e';
        case 'n':
          return 's';
        default:
          return 'n';
      }
    },
    endAngle: function(dir) {
      switch (dir) {
        case 'e':
          return 0;
        case 's':
          return Math.PI / 2;
        case 'w':
          return Math.PI;
        default:
          return Math.PI * 3 / 2;
      }
    },
    trackAt: function(x, y) {
      var result;
      result = null;
      Crafty("TrackSection").each(function() {
        if (this.at().x === x && this.at().y === y) {
          return result = this;
        }
      });
      return result;
    },
    dirx: function(dir) {
      switch (dir) {
        case 'e':
          return 1;
        case 'w':
          return -1;
        default:
          return 0;
      }
    },
    diry: function(dir) {
      switch (dir) {
        case 'n':
          return -1;
        case 's':
          return 1;
        default:
          return 0;
      }
    },
    heading: function(x, y) {
      if (x === -1) {
        return 'w';
      } else if (x === 1) {
        return 'e';
      } else if (y === -1) {
        return 'n';
      } else if (y === 1) {
        return 's';
      } else {
        return null;
      }
    },
    getTargetDirection: function(track, dir) {
      var idx;
      idx = track.dir.indexOf(Util.opposite(dir));
      if (idx === track.dir.length - 1) {
        return track.dir[idx - 1];
      } else {
        return track.dir[idx + 1];
      }
    },
    assignStations: function() {
      var i;
      i = 0;
      return Crafty('Station').each(function() {
        if (!window.HEADLESS_MODE) {
          Crafty.e('2D, Canvas, spr_stop' + ['a', 'b', 'c', 'd', 'e', 'f'][i]).attr({
            x: this.x + (this.facing === 'e' || this.facing === 'w' ? 6 : 20),
            y: this.y - 20,
            z: 999
          });
        }
        return this.letter = ['a', 'b', 'c', 'd', 'e', 'f'][i++];
      });
    },
    gameOver: function(failure) {
      if (GameState.running) {
        GameState.running = false;
        if (failure) {
          setTimeout(function() {
            return Crafty.e('FailureText');
          }, 1000);
          return this;
        } else {
          return setTimeout(function() {
            return Crafty.e('VictoryText');
          }, 800);
        }
      }
    },
    createTrain: function(x, y, playerOne, dir, cars) {
      var front, i, letter, temp, train, _i, _j, _len, _ref, _ref1, _results;
      if (cars == null) {
        cars = 3;
      }
      letter = (playerOne ? 'r' : 'b');
      train = Crafty.e((playerOne || !window.singlePlayerMode ? 'PlayerTrain' : 'AITrain')).at(x, y).attr('playerOne', playerOne).attr('sourceDirection', dir).attr('targetDirection', dir).findTrack();
      if (playerOne || !window.singlePlayerMode) {
        train.bindKeyboardTurn((playerOne ? Crafty.keys.Q : Crafty.keys.P));
      }
      train.moveAlongTrack(0);
      train.followers = [];
      front = train;
      train.attr('head', train);
      _ref1 = (cars > 1 ? (function() {
        _results = [];
        for (var _j = 2, _ref = Math.max(2, cars); 2 <= _ref ? _j <= _ref : _j >= _ref; 2 <= _ref ? _j++ : _j--){ _results.push(_j); }
        return _results;
      }).apply(this) : []);
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        i = _ref1[_i];
        temp = Crafty.e('FollowTrain').at(x, y).attr('playerOne', playerOne).attr('sourceDirection', dir).attr('targetDirection', dir).findTrack().attr('front', front).attr('head', train);
        if (i === 2) {
          temp.addComponent("CarryingTrain");
        }
        front = temp;
        train.followers.push(front);
        front.moveAlongTrack(-22 * (i - 1));
        front.distanceTraveled = 0;
      }
      return train;
    },
    setupFromTiled: function(tiledmap) {
      var firstTrain, prop, secondTrain, tile, tilecode, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
      _ref = tiledmap.getEntitiesInLayer('Tracks');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tile = _ref[_i];
        tile.addComponent('TrackSection');
        for (prop in tile.__c) {
          if (prop.substring(0, 4) === 'Tile') {
            tilecode = prop.substring(4);
            switch (tilecode) {
              case '1':
                tile.dir = ['e', 's'];
                break;
              case '2':
                tile.dir = ['w', 's'];
                break;
              case '7':
                tile.dir = ['n', 'e'];
                break;
              case '8':
                tile.dir = ['n', 'w'];
                break;
              case '13':
                tile.dir = ['e', 'w'];
                break;
              case '14':
                tile.dir = ['n', 's'];
                break;
              case '19':
                tile.dir = ['w', 'e', 'n'];
                break;
              case '20':
                tile.dir = ['w', 'e', 's'];
                break;
              case '25':
                tile.dir = ['s', 'n', 'e'];
                break;
              case '26':
                tile.dir = ['s', 'n', 'w'];
                break;
              case '27':
                tile.dir = ['s', 'n', 'e', 'w'];
                break;
              case '31':
                tile.dir = ['e', 'w', 's'];
                break;
              case '32':
                tile.dir = ['e', 'w', 'n'];
                break;
              case '37':
                tile.dir = ['n', 's', 'e'];
                break;
              case '38':
                tile.dir = ['n', 's', 'w'];
            }
          }
        }
      }
      _ref1 = tiledmap.getEntitiesInLayer('Stations');
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        tile = _ref1[_j];
        for (prop in tile.__c) {
          if (prop.substring(0, 4) === 'Tile') {
            tilecode = prop.substring(4);
            if ((tilecode === '29' || tilecode === '30' || tilecode === '33' || tilecode === '34' || tilecode === '35' || tilecode === '36' || tilecode === '39' || tilecode === '40' || tilecode === '41' || tilecode === '42' || tilecode === '43' || tilecode === '44' || tilecode === '45' || tilecode === '46' || tilecode === '47' || tilecode === '48' || tilecode === '49' || tilecode === '50' || tilecode === '53' || tilecode === '54' || tilecode === '62' || tilecode === '63' || tilecode === '64') && (!window.HEADLESS_MODE)) {
              Crafty.e('2D, Canvas, LightLayer, spr_light' + tilecode).attr({
                x: tile.x,
                y: tile.y,
                z: 801
              });
            }
            switch (tilecode) {
              case '35':
                tile.addComponent('Station').setupAttach('w');
                break;
              case '36':
                tile.addComponent('Station').setupAttach('e');
                break;
              case '45':
                tile.addComponent('Station').setupAttach('n');
                break;
              case '47':
                tile.addComponent('Station').setupAttach('s');
            }
          }
        }
      }
      _ref2 = tiledmap.getEntitiesInLayer('Trains');
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        tile = _ref2[_k];
        tile.addComponent('Actor');
        for (prop in tile.__c) {
          if (prop.substring(0, 4) === 'Tile') {
            tilecode = prop.substring(4);
            switch (tilecode) {
              case '9':
                firstTrain = Util.createTrain(tile.at().x, tile.at().y, true, 'e');
                break;
              case '10':
                firstTrain = Util.createTrain(tile.at().x, tile.at().y, true, 'n');
                break;
              case '11':
                firstTrain = Util.createTrain(tile.at().x, tile.at().y, true, 'w');
                break;
              case '12':
                firstTrain = Util.createTrain(tile.at().x, tile.at().y, true, 's');
                break;
              case '21':
                secondTrain = Util.createTrain(tile.at().x, tile.at().y, false, 'e');
                break;
              case '22':
                secondTrain = Util.createTrain(tile.at().x, tile.at().y, false, 'n');
                break;
              case '23':
                secondTrain = Util.createTrain(tile.at().x, tile.at().y, false, 'w');
                break;
              case '24':
                secondTrain = Util.createTrain(tile.at().x, tile.at().y, false, 's');
            }
            tile.destroy();
          }
        }
      }
      if (tiledmap.getEntitiesInLayer('Props')) {
        _ref3 = tiledmap.getEntitiesInLayer('Props');
        for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
          tile = _ref3[_l];
          tile.attr('z', 9);
          for (prop in tile.__c) {
            if (prop.substring(0, 4) === 'Tile') {
              tilecode = prop.substring(4);
              if (tilecode === '29' || tilecode === '30' || tilecode === '33' || tilecode === '34' || tilecode === '25' || tilecode === '36' || tilecode === '39' || tilecode === '40' || tilecode === '41' || tilecode === '42' || tilecode === '43' || tilecode === '44' || tilecode === '45' || tilecode === '46' || tilecode === '47' || tilecode === '48' || tilecode === '49' || tilecode === '50' || tilecode === '53' || tilecode === '54' || tilecode === '62' || tilecode === '63' || tilecode === '64' || tilecode === '67' || tilecode === '68' || tilecode === '69' || tilecode === '73' || tilecode === '74' || tilecode === '76' || tilecode === '79' || tilecode === '80') {
                Crafty.e('2D, Canvas, LightLayer, spr_light' + tilecode).attr({
                  x: tile.x,
                  y: tile.y,
                  z: 801
                });
              }
            }
          }
        }
      }
      if (!window.HEADLESS_MODE) {
        if (firstTrain) {
          Crafty.e('PlayerScore').attr({
            "x": 0,
            "y": 512
          }).attr({
            train: firstTrain,
            playerOne: true
          }).setup();
        }
        if (secondTrain) {
          return Crafty.e('PlayerScore').attr({
            "x": 392,
            "y": 512
          }).attr("train", secondTrain).setup();
        }
      }
    },
    sunrise: function(percent) {
      if (percent < 0.25) {
        return 'rgba(' + (3 + Math.floor(percent * 400)) + ',' + (29 + Math.floor(percent * 200)) + ',51,' + (1 - percent) / 2 + ')';
      } else {
        return 'rgba(' + (103 - Math.floor((percent - 0.25) * 300)) + ',' + (79 + Math.floor((percent - 0.25) * 60)) + ',' + (51 + Math.floor((percent - 0.25) * 150)) + ',' + (1 - percent) / 2 + ')';
      }
    }
  };

  window.Constants = {
    DIR_PREFIXES: ['n', 'e', 'w', 's'],
    MINUTE_DELAY: 99,
    COLLISION_SIZE: 22,
    TILE_HALF: 14,
    CURVE_QUARTER: 28 * Math.PI / 4,
    ENDING_DIALOGS: [['Oh no!', 'The trains collided!', 'You caused an accident!', 'What a disaster!', 'That wasn\'t supposed to happen!'], ['If anyone asks, you weren\'t having a competition.', 'You know, this is really everyone\'s fault.', 'You know, this is really everyone\'s fault. Even the passengers.', 'Some passengers were jostled, many more were late for work.', 'Remember, you\'re supposed to AVOID each other.', 'What kind of urban planner designed this place, anyway?!']],
    MAX_PASSENGERS: 100,
    FULL_SPEED: 1.75,
    REDUCED_SPEED: 0.875,
    TILE_JUMP_LIMIT: 5,
    MINUTE_LENGTH: 22
  };

  window.GameState = {
    running: false
  };

  window.GameClock = {
    elapsed: 0,
    newDay: function() {
      this.hour = 5;
      return this.minute = 55;
    },
    update: function() {
      if (this.minute >= 59) {
        this.hour += 1;
        return this.minute = 0;
      } else {
        return this.minute += 1;
      }
    }
  };

  window.AI = {
    checkAlongSegment: function(x, y, dir) {
      var dist, heading, stations, track, trainPosition, trainPositions, trainPresences, _i, _len;
      trainPositions = [];
      stations = [];
      trainPresences = {
        playerOne: false,
        playerTwo: false
      };
      Crafty("Train").each(function() {
        return trainPositions.push([this.currentTrack.at().x, this.currentTrack.at().y, this.playerOne]);
      });
      dist = 0;
      heading = dir;
      track = Util.trackAt(x, y);
      while (track.dir.length !== 3 || track.dir[1] !== Util.opposite(heading)) {
        if (track.station) {
          stations.push(track.station);
        }
        if (track.dir.length === 2) {
          heading = (Util.opposite(heading) === track.dir[0] ? track.dir[track.dir.length - 1] : track.dir[0]);
        } else if (track.dir.length === 3) {
          heading = track.dir[1];
        }
        dist += 1;
        x += Util.dirx(heading);
        y += Util.diry(heading);
        for (_i = 0, _len = trainPositions.length; _i < _len; _i++) {
          trainPosition = trainPositions[_i];
          if (trainPosition[0] === x && trainPosition[1] === y) {
            trainPresences[(trainPosition[2] ? "playerOne" : "playerTwo")] = true;
          }
        }
        track = Util.trackAt(x, y);
      }
      return {
        distance: dist,
        trainsFound: trainPresences,
        stations: stations
      };
    }
  };

  $.getJSON('./maps.json', function(mapListSource) {
    return window.MapList = mapListSource;
  });

}).call(this);
